# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2

jobs:
  dep:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/fomenta/helm-s3
    steps:
      - checkout
      - run:
          command: |
            curl -sSL https://github.com/golang/dep/releases/download/v0.4.1/dep-linux-amd64 -o /go/bin/dep
            chmod +x /go/bin/dep
      - run: dep ensure -v -vendor-only
      - persist_to_workspace:
          root: /go/src/github.com/fomenta
          paths:
            - helm-s3
  test-unit:
    docker:
      - image: circleci/golang:1.10
    working_directory: /go/src/github.com/fomenta/helm-s3
    steps:
      - attach_workspace:
          at: /go/src/github.com/fomenta
      - run: ./.circleci/testcover.sh
      - run: bash <(curl -s https://codecov.io/bash)
  test-integration-and-e2e:
    docker:
      - image: circleci/golang:1.9
        environment:
          AWS_ACCESS_KEY_ID: EXAMPLEKEY123
          AWS_SECRET_ACCESS_KEY: EXAMPLESECRET123456
          AWS_DEFAULT_REGION: us-east-1
          AWS_ENDPOINT: helm-s3-minio:9000
          AWS_DISABLE_SSL: true
          HELM_VERSION: v2.6.2
      - image: minio/minio:latest
        name: helm-s3-minio
        environment:
          MINIO_ACCESS_KEY: EXAMPLEKEY123
          MINIO_SECRET_KEY: EXAMPLESECRET123456
        command: ["server", "/data"]
    working_directory: /go/src/github.com/fomenta/helm-s3
    steps:
      - attach_workspace:
          at: /go/src/github.com/fomenta
      - run:
          name: Build the plugin
          command: go build -o bin/helms3 ./cmd/helms3
      - run:
          name: Install helm, install plugin
          command: |
            curl -sSL https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar xz
            mv linux-amd64/helm ${GOPATH}/bin/helm
            rm -rf linux-amd64
            helm init --client-only
            HELM_S3_PLUGIN_NO_INSTALL_HOOK=true helm plugin install ${GOPATH}/src/github.com/fomenta/helm-s3
      - run:
          name: Install minio client, prepare minio
          command: |
            curl -sSL https://dl.minio.io/client/mc/release/linux-amd64/mc -o ${GOPATH}/bin/mc
            chmod +x ${GOPATH}/bin/mc
            mc config host add helm-s3-minio http://helm-s3-minio:9000 $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
            mc mb helm-s3-minio/test-bucket
      - run:
          name: Run (legacy) integration tests
          command: ./hack/integration-tests.sh
      - run:
          name: Run e2e tests
          command: go test -v ./tests/e2e/...
  test-install:
    docker:
      - image: circleci/buildpack-deps:stretch-curl
    working_directory: /tmp
    steps:
      - run:
          name: Install helm
          command: |
            tar_filename="helm-v2.10.0-linux-amd64.tar.gz"
            checksum_filename="helm-v2.10.0-linux-amd64.tar.gz.sha256"
            curl -sSL https://storage.googleapis.com/kubernetes-helm/${tar_filename} -O
            curl -sSL https://storage.googleapis.com/kubernetes-helm/${checksum_filename} -O
            echo "$(cat ${checksum_filename})  ${tar_filename}" | sha256sum -c
            tar xzf ${tar_filename}
            sudo mv linux-amd64/helm /usr/local/bin/helm
            rm -rf linux-amd64 ${tar_filename} ${checksum_filename}
            helm init -c
      - run:
          name: Install helm-s3 plugin
          command: |
            sudo apt-get install -y make

            version="${CIRCLE_SHA1}"
            if [ -n "${CIRCLE_TAG}" ]; then
              version="${CIRCLE_TAG#v*}"
            fi

            echo "Check installation of version ${version}"
            helm plugin install https://github.com/fomenta/helm-s3.git --version ${version}
  release:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/fomenta/helm-s3
    steps:
      - attach_workspace:
          at: /go/src/github.com/fomenta
      - deploy:
          name: goreleaser
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              curl -sL https://git.io/goreleaser | bash
            fi

workflows:
  version: 2
  # test-pipeline runs on each push and merge, and does not run on tags.
  test-pipeline:
    jobs:
      - dep
      - test-unit:
          requires:
            - dep
      - test-integration-and-e2e:
          requires:
            - dep
      - test-install:
          requires:
            - dep
          filters:
            branches:
              only: master
  # release-pipeline runs only on tags.
  release-pipeline:
    jobs:
      - dep:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - test-install:
          requires:
            - dep
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release:
          requires:
            - dep
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
